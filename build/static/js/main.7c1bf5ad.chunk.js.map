{"version":3,"sources":["card.js","App.js","serviceWorker.js","index.js"],"names":["RecipeReviewCard","state","expanded","handleExpandClick","_this","setState","classes","this","props","react_default","a","createElement","Card_default","className","card","header","topPanel","CardActions_default","actions","disableActionSpacing","IconButton_default","aria-label","Favorite_default","Share_default","classnames","expand","Object","defineProperty","expandOpen","onClick","aria-expanded","ExpandMore_default","React","Component","withStyles","theme","width","height","backgroundColor","color","display","flexDirection","justifyContent","padding","media","paddingTop","transform","marginLeft","transition","transitions","create","duration","shortest","avatar","red","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mWAoDMA,6MACJC,MAAQ,CAAEC,UAAU,KAEpBC,kBAAoB,WAClBC,EAAKC,SAAS,SAAAJ,GAAK,MAAK,CAAEC,UAAWD,EAAMC,qFAGpC,IACCI,EAAYC,KAAKC,MAAjBF,QAER,OACEG,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,UAAWP,EAAQQ,MACvBL,EAAAC,EAAAC,cAAA,QAAME,UAAWP,EAAQS,QAAzB,UACAN,EAAAC,EAAAC,cAAA,OAAKE,UAAWP,EAAQU,WACxBP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAaG,UAAWP,EAAQY,QAASC,sBAAoB,GAC3DV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAYW,aAAW,oBACrBZ,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,OAEFD,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAYW,aAAW,SACrBZ,EAAAC,EAAAC,cAACY,EAAAb,EAAD,OAEFD,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACEG,UAAWW,IAAWlB,EAAQmB,OAATC,OAAAC,EAAA,EAAAD,CAAA,GAClBpB,EAAQsB,WAAarB,KAAKN,MAAMC,WAEnC2B,QAAStB,KAAKJ,kBACd2B,gBAAevB,KAAKN,MAAMC,SAC1BmB,aAAW,aAEXZ,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,gBA7BmBsB,IAAMC,WAyCtBC,uBAjFA,SAAAC,GAAK,MAAK,CACvBrB,KAAM,CACJsB,MAAO,IACPC,OAAQ,KAEVtB,OAAQ,CACNuB,gBAAiB,UACjBC,MAAO,OACPH,MAAO,OACPI,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,QAAS,qBAEXC,MAAO,CACLP,OAAQ,EACRQ,WAAY,UAEd3B,QAAS,CACPsB,QAAS,QAEXf,OAAQ,CACNqB,UAAW,eACXC,WAAY,OACZC,WAAYb,EAAMc,YAAYC,OAAO,YAAa,CAChDC,SAAUhB,EAAMc,YAAYE,SAASC,YAGzCxB,WAAY,CACVkB,UAAW,kBAEbO,OAAQ,CACNf,gBAAiBgB,IAAI,MAEvBtC,SAAU,CACRsB,gBAAiB,UACjBD,OAAQ,WA6CGH,CAAmBlC,GC/EnBuD,2LARX,OACE9C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACG,EAAD,cAJUmB,cCQEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7c1bf5ad.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport classnames from 'classnames';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport red from '@material-ui/core/colors/red';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ShareIcon from '@material-ui/icons/Share';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst styles = theme => ({\n  card: {\n    width: 220,\n    height: 300,\n  },\n  header: {\n    backgroundColor: \"#d81b60\",\n    color: \"#fff\",\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: 'row',\n    justifyContent: 'center',\n    padding: '12px 0px 12px 0px',\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  actions: {\n    display: 'flex',\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n  topPanel: {\n    backgroundColor: \"#d81b60\",\n    height: \"130px\",\n  },\n});\n\nclass RecipeReviewCard extends React.Component {\n  state = { expanded: false };\n\n  handleExpandClick = () => {\n    this.setState(state => ({ expanded: !state.expanded }));\n  };\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <Card className={classes.card}>\n        <span className={classes.header}>Weekly</span>\n        <div className={classes.topPanel}></div>\n        <CardActions className={classes.actions} disableActionSpacing>\n          <IconButton aria-label=\"Add to favorites\">\n            <FavoriteIcon />\n          </IconButton>\n          <IconButton aria-label=\"Share\">\n            <ShareIcon />\n          </IconButton>\n          <IconButton\n            className={classnames(classes.expand, {\n              [classes.expandOpen]: this.state.expanded,\n            })}\n            onClick={this.handleExpandClick}\n            aria-expanded={this.state.expanded}\n            aria-label=\"Show more\"\n          >\n            <ExpandMoreIcon />\n          </IconButton>\n        </CardActions>\n      </Card>\n    );\n  }\n}\n\nRecipeReviewCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(RecipeReviewCard);\n","import React, { Component } from 'react';\nimport RecipeReviewCard from './card';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <RecipeReviewCard></RecipeReviewCard>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}